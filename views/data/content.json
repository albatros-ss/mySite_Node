{
  "skills": {
    "Frontend": {
      "HTML5": "90",
      "CSS3": "90",
      "JavaScript & jQuery": "75",
      "Vue": "60"
    },
    "Backend": {
      "NodeJs & npm": "30",
      "MongoDB": "15"
    },
    "WorkFlow": {
      "Git": "75",
      "Gulp": "85",
      "Webpack": "25"
    }
  },
  "social": {
    "Facebook": {
      "href": "https://www.facebook.com/albatros.vad",
      "icon": "facebook"
    },
    "Linkedin": {
      "href": "https://www.linkedin.com/feed/",
      "icon": "in"
    },
    "GitHub": {
      "href": "https://github.com/albatros-ss",
      "icon": "github"
    }
  },
  "menu": {
    "Мои работы": "./works",
    "Обо мне": "./about",
    "Блог": "./blog",
    "Авторизация": "/"
  },
  "welcomeMenu": {
    "Мои работы": "./works",
    "Обо мне": "./about",
    "Блог": "./blog"
  },
  "address": {
    "Vadim Volodko": {
      "href": "skype:live:albatros.vad",
      "icon": "skype",
      "round_icon": "skype_n"
    },
    "albatros.andr@gmail.com": {
      "href": "mailto:albatros.andr@gmail.com",
      "icon": "envelope2",
      "round_icon": "envelope_n"
    },
    "+380 67 907 6221": {
      "href": "tel:+380679076221",
      "icon": "phone2",
      "round_icon": "phone_n"
    },
    "Чернигов": {
      "href": "https://goo.gl/maps/X4XfuF5mffM2",
      "icon": "map-marker",
      "round_icon": "map_n"
    }
  },
  "works": [
    {
      "name": "Доска объявлений",
      "description": "Vue, Vuex, Vuetify, Firebase",
      "link": "https://itc-ads-alb.firebaseapp.com/",
      "picture": "assets/img/catalog/1.png"
    },
    {
      "name": "Работа 2",
      "description": "HTML, CSS, JAVASCRIPT",
      "link": "#",
      "picture": "assets/img/catalog/2.png"
    },
    {
      "name": "Работа 3",
      "description": "HTML, CSS, JAVASCRIPT",
      "link": "#",
      "picture": "assets/img/catalog/3.png"
    },
    {
      "name": "Работа 4",
      "description": "HTML, CSS, JAVASCRIPT",
      "link": "#",
      "picture": "assets/img/catalog/4.png"
    }
  ],
  "posts": [
    {
      "title": "Моя шпаргалка по работе с Git",
      "date": "24 апреля 2018 г.",
      "text": "<p>Создать новый репозиторий:</p><blockquote><p><mark class=\"marker-yellow\">git init project-name</mark></p></blockquote><p>Клонировать репозиторий с удаленной машины:</p><blockquote><p><mark class=\"marker-yellow\">git clone git@bitbucket.org:afiskon/hs-textgen.git</mark></p></blockquote><p>Если хотим пушить один код в несколько репозиториев:</p><blockquote><p><mark class=\"marker-yellow\">git remote add remotename git@gitlab.example.ru:repo.git</mark></p></blockquote><p>Добавить файл в репозиторий:</p><blockquote><p><mark class=\"marker-yellow\">git add text.txt</mark></p></blockquote><p>Удалить файл:</p><blockquote><p><mark class=\"marker-yellow\">git rm text.txt</mark></p></blockquote><p>Текущее состояние репозитория (изменения, неразрешенные конфликты и тп):</p><blockquote><p><mark class=\"marker-yellow\">git status</mark></p></blockquote><p>Сделать коммит:</p><blockquote><p><mark class=\"marker-yellow\">git commit -a -m \"Commit description\"</mark></p></blockquote><p>Сделать коммит, введя его описание с помощью $EDITOR:</p><blockquote><p><mark class=\"marker-yellow\">git commit -a</mark></p></blockquote><p>Замержить <i>все ветки</i> локального репозитория на удаленный репозиторий (аналогично вместо origin можно указать и remotename, см выше):</p><blockquote><p><mark class=\"marker-yellow\">git push origin</mark></p></blockquote><p>Аналогично предыдущему, но делается пуш <i>только ветки master</i>:</p><blockquote><p><mark class=\"marker-yellow\">git push origin master</mark></p></blockquote><p>Запушить <i>текущую ветку</i>, не вводя целиком ее название:</p><blockquote><p><mark class=\"marker-yellow\">git push origin HEAD</mark></p></blockquote><p>Замержить все ветки с удаленного репозитория:</p><blockquote><p><mark class=\"marker-yellow\">git pull origin</mark></p></blockquote><p>Аналогично предыдущему, но накатывается только ветка master:</p><blockquote><p><mark class=\"marker-yellow\">git pull origin master</mark></p></blockquote><p>Накатить текущую ветку, не вводя ее длинное имя:</p><blockquote><p><mark class=\"marker-yellow\">git pull origin HEAD</mark></p></blockquote><p>Скачать все ветки с origin, но не мержить их в локальный репозиторий:</p><blockquote><p><mark class=\"marker-yellow\">git fetch origin</mark></p></blockquote><p>Аналогично предыдущему, но только для одной заданной ветки:</p><blockquote><p><mark class=\"marker-yellow\">git fetch origin master</mark></p></blockquote><p>Начать работать с веткой some_branch (уже существующей):</p><blockquote><p><mark class=\"marker-yellow\">git checkout -b some_branch origin/some_branch</mark></p></blockquote><p>Создать новый бранч (ответвится от текущего):</p><blockquote><p><mark class=\"marker-yellow\">git branch some_branch</mark></p></blockquote><p>Переключиться на другую ветку (из тех, с которыми уже работаем):</p><blockquote><p><mark class=\"marker-yellow\">git checkout some_branch</mark></p></blockquote><p>Получаем список веток, с которыми работаем:</p><blockquote><p><mark class=\"marker-yellow\">git branch </mark><i><mark class=\"marker-yellow\"># звездочкой отмечена текущая ветвь</mark></i></p></blockquote><p>Просмотреть все существующие ветви:</p><blockquote><p><mark class=\"marker-yellow\">git branch -a </mark><i><mark class=\"marker-yellow\"># | grep something</mark></i></p></blockquote><p>Замержить some_branch в текущую ветку:</p><blockquote><p><mark class=\"marker-yellow\">git merge some_branch</mark></p></blockquote><p>Удалить бранч (после мержа):</p><blockquote><p><mark class=\"marker-yellow\">git branch -d some_branch</mark></p></blockquote><p>Просто удалить бранч (тупиковая ветвь):</p><blockquote><p><mark class=\"marker-yellow\">git branch -D some_branch</mark></p></blockquote><p>История изменений:</p><blockquote><p><mark class=\"marker-yellow\">git log</mark></p></blockquote><p>История изменений в обратном порядке:</p><blockquote><p><mark class=\"marker-yellow\">git log --reverse</mark></p></blockquote><p>История конкретного файла:</p><blockquote><p><mark class=\"marker-yellow\">git log file.txt</mark></p></blockquote><p>Аналогично предыдущему, но с просмотром сделанных изменений:</p><blockquote><p><mark class=\"marker-yellow\">git log -p file.txt</mark></p></blockquote><p>История с именами файлов и псевдографическим изображением бранчей:</p><blockquote><p><mark class=\"marker-yellow\">git log --stat --graph</mark></p></blockquote><p>Изменения, сделанные в заданном коммите:</p><blockquote><p><mark class=\"marker-yellow\">git show d8578edf8458ce06fbc5bb76a58c5ca</mark></p></blockquote><p>Посмотреть, кем в последний раз правилась каждая строка файла:</p><blockquote><p><mark class=\"marker-yellow\">git blame file.txt</mark></p></blockquote><p>Удалить бранч из репозитория на сервере:</p><blockquote><p><mark class=\"marker-yellow\">git push origin :branch-name</mark></p></blockquote><p>Откатиться к конкретному коммиту (хэш смотрим в «git log»):</p><blockquote><p><mark class=\"marker-yellow\">git reset --hard d8578edf8458ce06fbc5bb76a58c5ca</mark></p></blockquote><p>Аналогично предыдущему, но файлы на диске остаются без изменений:</p><blockquote><p><mark class=\"marker-yellow\">git reset --soft d8578edf8458ce06fbc5bb76a58c5ca</mark></p></blockquote><p>Попытаться обратить заданный commit (но чаще используется branch/reset + merge):</p><blockquote><p><mark class=\"marker-yellow\">git revert d8578edf8458ce06fbc5bb76a58c5ca</mark></p></blockquote><p>Просмотр изменений (суммарных, а не всех по очереди, как в «git log»):</p><blockquote><p><mark class=\"marker-yellow\">git diff </mark><i><mark class=\"marker-yellow\"># подробности см в \"git diff --help\"</mark></i></p></blockquote><p>Используем vimdiff в качестве программы для разрешения конфликтов (mergetool) по умолчанию:</p><blockquote><p><mark class=\"marker-yellow\">git config --global merge.tool vimdiff</mark></p></blockquote><p>Отключаем диалог «какой mergetool вы хотели бы использовать»:</p><blockquote><p><mark class=\"marker-yellow\">git config --global mergetool.prompt false</mark></p></blockquote><p>Отображаем табы как 4 пробела, например, в «git diff»:</p><blockquote><p><mark class=\"marker-yellow\">git config --global core.pager 'less -x4'</mark></p></blockquote><p>Создание <i>глобального </i>файла .gitignore:</p><blockquote><p><mark class=\"marker-yellow\">git config --global core.excludesfile ~/.gitignore_global</mark></p></blockquote><p>Разрешение конфликтов (когда оные возникают в результате мержа):</p><blockquote><p><mark class=\"marker-yellow\">git mergetool</mark></p></blockquote><p>Создание тэга:</p><blockquote><p><mark class=\"marker-yellow\">git tag some_tag </mark><i><mark class=\"marker-yellow\"># за тэгом можно указать хэш коммита</mark></i></p></blockquote><p>Удаление untracked files:</p><blockquote><p><mark class=\"marker-yellow\">git clean -f</mark></p></blockquote><p>«Упаковка» репозитория для увеличения скорости работы с ним:</p><blockquote><p><mark class=\"marker-yellow\">git gc</mark></p></blockquote><p>Иногда требуется создать копию репозитория или перенести его с одной машины на другую. Это делается примерно так:</p><blockquote><p><mark class=\"marker-yellow\">mkdir -p /tmp/git-copy</mark><br><mark class=\"marker-yellow\">cd /tmp/git-copy</mark><br><mark class=\"marker-yellow\">git clone --bare git@example.com:afiskon/cpp-opengl-tutorial1.git</mark><br><mark class=\"marker-yellow\">cd cpp-opengl-tutorial1.git</mark><br><mark class=\"marker-yellow\">git push --mirror git@example.com:afiskon/cpp-opengl-tutorial2.git</mark></p></blockquote><p>Следует отметить, что Git позволяет использовать короткую запись хэшей. Вместо «d8578edf8458ce06fbc5bb76a58c5ca» можно писать «d8578edf» или даже «d857».</p><p><span class=\"text-small\"><i>Оригинал статьи https://eax.me/git-commands/</i></span></p>"
    },
    {
      "title": "Установка Webstorm в Ubuntu",
      "date": "24 июля 2018 г.",
      "text": "<p><strong>Установка &nbsp;PhpStorm, WebStorm, IntelliJ Idea, PyCharm, CLion, ReSharper в Ubuntu.</strong></p><p>Для установки используется скрипт автора <a href=\"https://gist.github.com/zabidok\">zabidok</a></p><ol><li>Скачать скрипт <a href=\"files/jb_install_update.sh\">jb_install_update.sh</a></li><li>&nbsp;</li><li>Дать разрешение на выполнение файла &nbsp;</li><li>&nbsp;<ol><li><mark class=\"marker-yellow\">chmod +x jb_install_update.sh</mark></li><li>&nbsp;</li></ol></li><li>Запустить скрипт&nbsp;</li><li>&nbsp;<ol><li><mark class=\"marker-yellow\">sudo &nbsp;./jb_install_update.sh</mark></li></ol></li></ol>"
    },
    {
      "title": "Установка MongoDB в Ubuntu",
      "date": "25 июля 2018 г.",
      "text": "<p>Устанавливаем по инструкции: <a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\">link</a>.</p><p>Создаем файл конфигурации mongodb.service в директории /etc/systemd/system с помощью nano или любого другого текстового редактора.</p><blockquote><p><mark class=\"marker-yellow\">sudo nano /etc/systemd/system/mongodb.service</mark></p></blockquote><p>Вставить следующий текст в этот файл.</p><blockquote><p><mark class=\"marker-green\">[Unit]\nDescription=High-performance, schema-free document-oriented database\n</mark></p><p><mark class=\"marker-green\">After=network.target\n</mark></p><p><mark class=\"marker-green\">\n[Service]\nUser=mongodb\nExecStart=/usr/bin/mongod --quiet --config /etc/mongod.conf\n</mark></p><p><mark class=\"marker-green\">\n[Install]\nWantedBy=multi-user.target</mark></p></blockquote><p>Запустим только что созданный нами сервис с помощью systemctl.</p><blockquote><p><mark class=\"marker-yellow\">sudo systemctl start mongodb</mark></p></blockquote><p>Для проверки успешного запуска сервиса можно использовать команду:</p><blockquote><p><mark class=\"marker-yellow\">sudo systemctl status mongodb</mark></p></blockquote><p>Включаем автоматический запуск MongoDB при старте системы.</p><blockquote><p><mark class=\"marker-yellow\">sudo systemctl enable mongodb</mark></p></blockquote><h2 style=\"text-align:center;\"><strong>Резервное копирование базы данных MongoDB</strong></h2><p>&nbsp;</p><p>Создаем папку где будут хранится резервные копии.</p><blockquote><p><mark class=\"marker-yellow\">mkdir ~/mongodumps&nbsp;</mark></p></blockquote><p>Открываем планировщик задач</p><blockquote><p><mark class=\"marker-yellow\">sudo crontab -e</mark></p></blockquote><p>Вставляем команду которая будет делать резервные копии в 3 часа 3 минуты в папку формата число - месяц - год.</p><blockquote><p><mark class=\"marker-green\">3 3 * * * mongodump --host localhost --port 27017 -u login -p password --authenticationDatabase nameDB --out $HOME/mongodumps/`date +\"\\%d-\\%m-\\%y\"`</mark></p></blockquote><blockquote><p>Вставляем команду которая будет&nbsp; очищать бекапы старше 3 дней.<br><mark class=\"marker-green\">1 3 * * * find $HOME/mongodumps/ -mtime +3 -exec rm -rf {} \\;&nbsp;</mark></p></blockquote><p>Сохраняем и выходим с файла.</p>"
    }
  ]
}
